// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/CollisionDetailsV2X.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from proto/CollisionDetailsV2X.proto</summary>
public static partial class CollisionDetailsV2XReflection {

  #region Descriptor
  /// <summary>File descriptor for proto/CollisionDetailsV2X.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CollisionDetailsV2XReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch9wcm90by9Db2xsaXNpb25EZXRhaWxzVjJYLnByb3RvIvYCChBDb2xsaXNp",
          "b25EZXRhaWxzEiAKGGNvbGxpc2lvbl9kZXRlY3Rpb25fZmxhZxgBIAEoBRIS",
          "CgphbGVydF90eXBlGAIgASgFEhkKEXNvdXJjZV92ZWhpY2xlX2lkGAMgASgJ",
          "EhkKEXRhcmdldF92ZWhpY2xlX2lkGAQgASgJEhkKEWFsZXJ0X0lORk9fcmFk",
          "aXVzGAUgASgBEhkKEWFsZXJ0X1dBUk5fcmFkaXVzGAYgASgBEhoKEmFsZXJ0",
          "X0JSQUtFX3JhZGl1cxgHIAEoARIaChJjb2xsaXNpb25fbGF0aXR1ZGUYCCAB",
          "KAESGwoTY29sbGlzaW9uX2xvbmdpdHVkZRgJIAEoARIaChJjb2xsaXNpb25f",
          "YWx0aXR1ZGUYCiABKAESHQoVZGlzdGFuY2VfdG9fY29sbGlzaW9uGAsgASgB",
          "EhoKEmFic19jb2xsaXNpb25fdGltZRgMIAEoBBIUCgx0aW1lc3RhbXBfbXMY",
          "DSABKARCNAobY29tLmNvbnRpLnYyeF9wcm9qZWN0LlByb3RvQhVDb2xsaXNp",
          "b25EZXRhaWxzUHJvdG9iBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CollisionDetails), global::CollisionDetails.Parser, new[]{ "CollisionDetectionFlag", "AlertType", "SourceVehicleId", "TargetVehicleId", "AlertINFORadius", "AlertWARNRadius", "AlertBRAKERadius", "CollisionLatitude", "CollisionLongitude", "CollisionAltitude", "DistanceToCollision", "AbsCollisionTime", "TimestampMs" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// Please refer to documentation for all fields 
/// </summary>
public sealed partial class CollisionDetails : pb::IMessage<CollisionDetails> {
  private static readonly pb::MessageParser<CollisionDetails> _parser = new pb::MessageParser<CollisionDetails>(() => new CollisionDetails());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CollisionDetails> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CollisionDetailsV2XReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CollisionDetails() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CollisionDetails(CollisionDetails other) : this() {
    collisionDetectionFlag_ = other.collisionDetectionFlag_;
    alertType_ = other.alertType_;
    sourceVehicleId_ = other.sourceVehicleId_;
    targetVehicleId_ = other.targetVehicleId_;
    alertINFORadius_ = other.alertINFORadius_;
    alertWARNRadius_ = other.alertWARNRadius_;
    alertBRAKERadius_ = other.alertBRAKERadius_;
    collisionLatitude_ = other.collisionLatitude_;
    collisionLongitude_ = other.collisionLongitude_;
    collisionAltitude_ = other.collisionAltitude_;
    distanceToCollision_ = other.distanceToCollision_;
    absCollisionTime_ = other.absCollisionTime_;
    timestampMs_ = other.timestampMs_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CollisionDetails Clone() {
    return new CollisionDetails(this);
  }

  /// <summary>Field number for the "collision_detection_flag" field.</summary>
  public const int CollisionDetectionFlagFieldNumber = 1;
  private int collisionDetectionFlag_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CollisionDetectionFlag {
    get { return collisionDetectionFlag_; }
    set {
      collisionDetectionFlag_ = value;
    }
  }

  /// <summary>Field number for the "alert_type" field.</summary>
  public const int AlertTypeFieldNumber = 2;
  private int alertType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AlertType {
    get { return alertType_; }
    set {
      alertType_ = value;
    }
  }

  /// <summary>Field number for the "source_vehicle_id" field.</summary>
  public const int SourceVehicleIdFieldNumber = 3;
  private string sourceVehicleId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SourceVehicleId {
    get { return sourceVehicleId_; }
    set {
      sourceVehicleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "target_vehicle_id" field.</summary>
  public const int TargetVehicleIdFieldNumber = 4;
  private string targetVehicleId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TargetVehicleId {
    get { return targetVehicleId_; }
    set {
      targetVehicleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "alert_INFO_radius" field.</summary>
  public const int AlertINFORadiusFieldNumber = 5;
  private double alertINFORadius_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double AlertINFORadius {
    get { return alertINFORadius_; }
    set {
      alertINFORadius_ = value;
    }
  }

  /// <summary>Field number for the "alert_WARN_radius" field.</summary>
  public const int AlertWARNRadiusFieldNumber = 6;
  private double alertWARNRadius_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double AlertWARNRadius {
    get { return alertWARNRadius_; }
    set {
      alertWARNRadius_ = value;
    }
  }

  /// <summary>Field number for the "alert_BRAKE_radius" field.</summary>
  public const int AlertBRAKERadiusFieldNumber = 7;
  private double alertBRAKERadius_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double AlertBRAKERadius {
    get { return alertBRAKERadius_; }
    set {
      alertBRAKERadius_ = value;
    }
  }

  /// <summary>Field number for the "collision_latitude" field.</summary>
  public const int CollisionLatitudeFieldNumber = 8;
  private double collisionLatitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double CollisionLatitude {
    get { return collisionLatitude_; }
    set {
      collisionLatitude_ = value;
    }
  }

  /// <summary>Field number for the "collision_longitude" field.</summary>
  public const int CollisionLongitudeFieldNumber = 9;
  private double collisionLongitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double CollisionLongitude {
    get { return collisionLongitude_; }
    set {
      collisionLongitude_ = value;
    }
  }

  /// <summary>Field number for the "collision_altitude" field.</summary>
  public const int CollisionAltitudeFieldNumber = 10;
  private double collisionAltitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double CollisionAltitude {
    get { return collisionAltitude_; }
    set {
      collisionAltitude_ = value;
    }
  }

  /// <summary>Field number for the "distance_to_collision" field.</summary>
  public const int DistanceToCollisionFieldNumber = 11;
  private double distanceToCollision_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double DistanceToCollision {
    get { return distanceToCollision_; }
    set {
      distanceToCollision_ = value;
    }
  }

  /// <summary>Field number for the "abs_collision_time" field.</summary>
  public const int AbsCollisionTimeFieldNumber = 12;
  private ulong absCollisionTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong AbsCollisionTime {
    get { return absCollisionTime_; }
    set {
      absCollisionTime_ = value;
    }
  }

  /// <summary>Field number for the "timestamp_ms" field.</summary>
  public const int TimestampMsFieldNumber = 13;
  private ulong timestampMs_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong TimestampMs {
    get { return timestampMs_; }
    set {
      timestampMs_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CollisionDetails);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CollisionDetails other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CollisionDetectionFlag != other.CollisionDetectionFlag) return false;
    if (AlertType != other.AlertType) return false;
    if (SourceVehicleId != other.SourceVehicleId) return false;
    if (TargetVehicleId != other.TargetVehicleId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AlertINFORadius, other.AlertINFORadius)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AlertWARNRadius, other.AlertWARNRadius)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AlertBRAKERadius, other.AlertBRAKERadius)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CollisionLatitude, other.CollisionLatitude)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CollisionLongitude, other.CollisionLongitude)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CollisionAltitude, other.CollisionAltitude)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DistanceToCollision, other.DistanceToCollision)) return false;
    if (AbsCollisionTime != other.AbsCollisionTime) return false;
    if (TimestampMs != other.TimestampMs) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CollisionDetectionFlag != 0) hash ^= CollisionDetectionFlag.GetHashCode();
    if (AlertType != 0) hash ^= AlertType.GetHashCode();
    if (SourceVehicleId.Length != 0) hash ^= SourceVehicleId.GetHashCode();
    if (TargetVehicleId.Length != 0) hash ^= TargetVehicleId.GetHashCode();
    if (AlertINFORadius != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AlertINFORadius);
    if (AlertWARNRadius != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AlertWARNRadius);
    if (AlertBRAKERadius != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AlertBRAKERadius);
    if (CollisionLatitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CollisionLatitude);
    if (CollisionLongitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CollisionLongitude);
    if (CollisionAltitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CollisionAltitude);
    if (DistanceToCollision != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DistanceToCollision);
    if (AbsCollisionTime != 0UL) hash ^= AbsCollisionTime.GetHashCode();
    if (TimestampMs != 0UL) hash ^= TimestampMs.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CollisionDetectionFlag != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CollisionDetectionFlag);
    }
    if (AlertType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(AlertType);
    }
    if (SourceVehicleId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(SourceVehicleId);
    }
    if (TargetVehicleId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(TargetVehicleId);
    }
    if (AlertINFORadius != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(AlertINFORadius);
    }
    if (AlertWARNRadius != 0D) {
      output.WriteRawTag(49);
      output.WriteDouble(AlertWARNRadius);
    }
    if (AlertBRAKERadius != 0D) {
      output.WriteRawTag(57);
      output.WriteDouble(AlertBRAKERadius);
    }
    if (CollisionLatitude != 0D) {
      output.WriteRawTag(65);
      output.WriteDouble(CollisionLatitude);
    }
    if (CollisionLongitude != 0D) {
      output.WriteRawTag(73);
      output.WriteDouble(CollisionLongitude);
    }
    if (CollisionAltitude != 0D) {
      output.WriteRawTag(81);
      output.WriteDouble(CollisionAltitude);
    }
    if (DistanceToCollision != 0D) {
      output.WriteRawTag(89);
      output.WriteDouble(DistanceToCollision);
    }
    if (AbsCollisionTime != 0UL) {
      output.WriteRawTag(96);
      output.WriteUInt64(AbsCollisionTime);
    }
    if (TimestampMs != 0UL) {
      output.WriteRawTag(104);
      output.WriteUInt64(TimestampMs);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CollisionDetectionFlag != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollisionDetectionFlag);
    }
    if (AlertType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AlertType);
    }
    if (SourceVehicleId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceVehicleId);
    }
    if (TargetVehicleId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetVehicleId);
    }
    if (AlertINFORadius != 0D) {
      size += 1 + 8;
    }
    if (AlertWARNRadius != 0D) {
      size += 1 + 8;
    }
    if (AlertBRAKERadius != 0D) {
      size += 1 + 8;
    }
    if (CollisionLatitude != 0D) {
      size += 1 + 8;
    }
    if (CollisionLongitude != 0D) {
      size += 1 + 8;
    }
    if (CollisionAltitude != 0D) {
      size += 1 + 8;
    }
    if (DistanceToCollision != 0D) {
      size += 1 + 8;
    }
    if (AbsCollisionTime != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AbsCollisionTime);
    }
    if (TimestampMs != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimestampMs);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CollisionDetails other) {
    if (other == null) {
      return;
    }
    if (other.CollisionDetectionFlag != 0) {
      CollisionDetectionFlag = other.CollisionDetectionFlag;
    }
    if (other.AlertType != 0) {
      AlertType = other.AlertType;
    }
    if (other.SourceVehicleId.Length != 0) {
      SourceVehicleId = other.SourceVehicleId;
    }
    if (other.TargetVehicleId.Length != 0) {
      TargetVehicleId = other.TargetVehicleId;
    }
    if (other.AlertINFORadius != 0D) {
      AlertINFORadius = other.AlertINFORadius;
    }
    if (other.AlertWARNRadius != 0D) {
      AlertWARNRadius = other.AlertWARNRadius;
    }
    if (other.AlertBRAKERadius != 0D) {
      AlertBRAKERadius = other.AlertBRAKERadius;
    }
    if (other.CollisionLatitude != 0D) {
      CollisionLatitude = other.CollisionLatitude;
    }
    if (other.CollisionLongitude != 0D) {
      CollisionLongitude = other.CollisionLongitude;
    }
    if (other.CollisionAltitude != 0D) {
      CollisionAltitude = other.CollisionAltitude;
    }
    if (other.DistanceToCollision != 0D) {
      DistanceToCollision = other.DistanceToCollision;
    }
    if (other.AbsCollisionTime != 0UL) {
      AbsCollisionTime = other.AbsCollisionTime;
    }
    if (other.TimestampMs != 0UL) {
      TimestampMs = other.TimestampMs;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CollisionDetectionFlag = input.ReadInt32();
          break;
        }
        case 16: {
          AlertType = input.ReadInt32();
          break;
        }
        case 26: {
          SourceVehicleId = input.ReadString();
          break;
        }
        case 34: {
          TargetVehicleId = input.ReadString();
          break;
        }
        case 41: {
          AlertINFORadius = input.ReadDouble();
          break;
        }
        case 49: {
          AlertWARNRadius = input.ReadDouble();
          break;
        }
        case 57: {
          AlertBRAKERadius = input.ReadDouble();
          break;
        }
        case 65: {
          CollisionLatitude = input.ReadDouble();
          break;
        }
        case 73: {
          CollisionLongitude = input.ReadDouble();
          break;
        }
        case 81: {
          CollisionAltitude = input.ReadDouble();
          break;
        }
        case 89: {
          DistanceToCollision = input.ReadDouble();
          break;
        }
        case 96: {
          AbsCollisionTime = input.ReadUInt64();
          break;
        }
        case 104: {
          TimestampMs = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GPSDetails.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from GPSDetails.proto</summary>
public static partial class GPSDetailsReflection {

  #region Descriptor
  /// <summary>File descriptor for GPSDetails.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GPSDetailsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChBHUFNEZXRhaWxzLnByb3RvIooCCgdHUFNEYXRhEgoKAmlkGAEgASgJEhQK",
          "DHZlaGljbGVfdHlwZRgCIAEoBRIRCgl0aW1lc3RhbXAYAyABKAQSEAoIbGF0",
          "aXR1ZGUYBCABKAESEQoJbG9uZ2l0dWRlGAUgASgBEhAKCGFsdGl0dWRlGAYg",
          "ASgBEg0KBXNwZWVkGAcgASgBEg8KB2JlYXJpbmcYCCABKAESEAoIYWNjdXJh",
          "Y3kYCSABKAESEAoIcHJvdmlkZXIYCiABKAkSFwoPc2F0ZWxsaXRlc191c2Vk",
          "GAsgASgFEhoKEnNhdGVsbGl0ZXNfaW5fdmlldxgMIAEoBRIMCgRpbWVpGA0g",
          "ASgJEgwKBHNzaWQYDiABKAlCFgoIcHJvdG9idWZCCkdQU0RldGFpbHNiBnBy",
          "b3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::GPSData), global::GPSData.Parser, new[]{ "Id", "VehicleType", "Timestamp", "Latitude", "Longitude", "Altitude", "Speed", "Bearing", "Accuracy", "Provider", "SatellitesUsed", "SatellitesInView", "Imei", "Ssid" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class GPSData : pb::IMessage<GPSData> {
  private static readonly pb::MessageParser<GPSData> _parser = new pb::MessageParser<GPSData>(() => new GPSData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GPSData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GPSDetailsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GPSData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GPSData(GPSData other) : this() {
    id_ = other.id_;
    vehicleType_ = other.vehicleType_;
    timestamp_ = other.timestamp_;
    latitude_ = other.latitude_;
    longitude_ = other.longitude_;
    altitude_ = other.altitude_;
    speed_ = other.speed_;
    bearing_ = other.bearing_;
    accuracy_ = other.accuracy_;
    provider_ = other.provider_;
    satellitesUsed_ = other.satellitesUsed_;
    satellitesInView_ = other.satellitesInView_;
    imei_ = other.imei_;
    ssid_ = other.ssid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GPSData Clone() {
    return new GPSData(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "vehicle_type" field.</summary>
  public const int VehicleTypeFieldNumber = 2;
  private int vehicleType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VehicleType {
    get { return vehicleType_; }
    set {
      vehicleType_ = value;
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 3;
  private ulong timestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  /// <summary>Field number for the "latitude" field.</summary>
  public const int LatitudeFieldNumber = 4;
  private double latitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Latitude {
    get { return latitude_; }
    set {
      latitude_ = value;
    }
  }

  /// <summary>Field number for the "longitude" field.</summary>
  public const int LongitudeFieldNumber = 5;
  private double longitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Longitude {
    get { return longitude_; }
    set {
      longitude_ = value;
    }
  }

  /// <summary>Field number for the "altitude" field.</summary>
  public const int AltitudeFieldNumber = 6;
  private double altitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Altitude {
    get { return altitude_; }
    set {
      altitude_ = value;
    }
  }

  /// <summary>Field number for the "speed" field.</summary>
  public const int SpeedFieldNumber = 7;
  private double speed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Speed {
    get { return speed_; }
    set {
      speed_ = value;
    }
  }

  /// <summary>Field number for the "bearing" field.</summary>
  public const int BearingFieldNumber = 8;
  private double bearing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Bearing {
    get { return bearing_; }
    set {
      bearing_ = value;
    }
  }

  /// <summary>Field number for the "accuracy" field.</summary>
  public const int AccuracyFieldNumber = 9;
  private double accuracy_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Accuracy {
    get { return accuracy_; }
    set {
      accuracy_ = value;
    }
  }

  /// <summary>Field number for the "provider" field.</summary>
  public const int ProviderFieldNumber = 10;
  private string provider_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Provider {
    get { return provider_; }
    set {
      provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "satellites_used" field.</summary>
  public const int SatellitesUsedFieldNumber = 11;
  private int satellitesUsed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SatellitesUsed {
    get { return satellitesUsed_; }
    set {
      satellitesUsed_ = value;
    }
  }

  /// <summary>Field number for the "satellites_in_view" field.</summary>
  public const int SatellitesInViewFieldNumber = 12;
  private int satellitesInView_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SatellitesInView {
    get { return satellitesInView_; }
    set {
      satellitesInView_ = value;
    }
  }

  /// <summary>Field number for the "imei" field.</summary>
  public const int ImeiFieldNumber = 13;
  private string imei_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Imei {
    get { return imei_; }
    set {
      imei_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ssid" field.</summary>
  public const int SsidFieldNumber = 14;
  private string ssid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ssid {
    get { return ssid_; }
    set {
      ssid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GPSData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GPSData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VehicleType != other.VehicleType) return false;
    if (Timestamp != other.Timestamp) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Altitude, other.Altitude)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Speed, other.Speed)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bearing, other.Bearing)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Accuracy, other.Accuracy)) return false;
    if (Provider != other.Provider) return false;
    if (SatellitesUsed != other.SatellitesUsed) return false;
    if (SatellitesInView != other.SatellitesInView) return false;
    if (Imei != other.Imei) return false;
    if (Ssid != other.Ssid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (VehicleType != 0) hash ^= VehicleType.GetHashCode();
    if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
    if (Latitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
    if (Longitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
    if (Altitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Altitude);
    if (Speed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Speed);
    if (Bearing != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bearing);
    if (Accuracy != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Accuracy);
    if (Provider.Length != 0) hash ^= Provider.GetHashCode();
    if (SatellitesUsed != 0) hash ^= SatellitesUsed.GetHashCode();
    if (SatellitesInView != 0) hash ^= SatellitesInView.GetHashCode();
    if (Imei.Length != 0) hash ^= Imei.GetHashCode();
    if (Ssid.Length != 0) hash ^= Ssid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (VehicleType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(VehicleType);
    }
    if (Timestamp != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(Timestamp);
    }
    if (Latitude != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(Latitude);
    }
    if (Longitude != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(Longitude);
    }
    if (Altitude != 0D) {
      output.WriteRawTag(49);
      output.WriteDouble(Altitude);
    }
    if (Speed != 0D) {
      output.WriteRawTag(57);
      output.WriteDouble(Speed);
    }
    if (Bearing != 0D) {
      output.WriteRawTag(65);
      output.WriteDouble(Bearing);
    }
    if (Accuracy != 0D) {
      output.WriteRawTag(73);
      output.WriteDouble(Accuracy);
    }
    if (Provider.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(Provider);
    }
    if (SatellitesUsed != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(SatellitesUsed);
    }
    if (SatellitesInView != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(SatellitesInView);
    }
    if (Imei.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(Imei);
    }
    if (Ssid.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(Ssid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (VehicleType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VehicleType);
    }
    if (Timestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
    }
    if (Latitude != 0D) {
      size += 1 + 8;
    }
    if (Longitude != 0D) {
      size += 1 + 8;
    }
    if (Altitude != 0D) {
      size += 1 + 8;
    }
    if (Speed != 0D) {
      size += 1 + 8;
    }
    if (Bearing != 0D) {
      size += 1 + 8;
    }
    if (Accuracy != 0D) {
      size += 1 + 8;
    }
    if (Provider.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
    }
    if (SatellitesUsed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SatellitesUsed);
    }
    if (SatellitesInView != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SatellitesInView);
    }
    if (Imei.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Imei);
    }
    if (Ssid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ssid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GPSData other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.VehicleType != 0) {
      VehicleType = other.VehicleType;
    }
    if (other.Timestamp != 0UL) {
      Timestamp = other.Timestamp;
    }
    if (other.Latitude != 0D) {
      Latitude = other.Latitude;
    }
    if (other.Longitude != 0D) {
      Longitude = other.Longitude;
    }
    if (other.Altitude != 0D) {
      Altitude = other.Altitude;
    }
    if (other.Speed != 0D) {
      Speed = other.Speed;
    }
    if (other.Bearing != 0D) {
      Bearing = other.Bearing;
    }
    if (other.Accuracy != 0D) {
      Accuracy = other.Accuracy;
    }
    if (other.Provider.Length != 0) {
      Provider = other.Provider;
    }
    if (other.SatellitesUsed != 0) {
      SatellitesUsed = other.SatellitesUsed;
    }
    if (other.SatellitesInView != 0) {
      SatellitesInView = other.SatellitesInView;
    }
    if (other.Imei.Length != 0) {
      Imei = other.Imei;
    }
    if (other.Ssid.Length != 0) {
      Ssid = other.Ssid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 16: {
          VehicleType = input.ReadInt32();
          break;
        }
        case 24: {
          Timestamp = input.ReadUInt64();
          break;
        }
        case 33: {
          Latitude = input.ReadDouble();
          break;
        }
        case 41: {
          Longitude = input.ReadDouble();
          break;
        }
        case 49: {
          Altitude = input.ReadDouble();
          break;
        }
        case 57: {
          Speed = input.ReadDouble();
          break;
        }
        case 65: {
          Bearing = input.ReadDouble();
          break;
        }
        case 73: {
          Accuracy = input.ReadDouble();
          break;
        }
        case 82: {
          Provider = input.ReadString();
          break;
        }
        case 88: {
          SatellitesUsed = input.ReadInt32();
          break;
        }
        case 96: {
          SatellitesInView = input.ReadInt32();
          break;
        }
        case 106: {
          Imei = input.ReadString();
          break;
        }
        case 114: {
          Ssid = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
